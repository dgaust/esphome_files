esphome:
  name: alarmpanelpro
  friendly_name: AlarmPanelPro
  project:
    name: esphome.w32-sc01-plus
    version: "1.1"
  platformio_options:
    build_unflags: -Werror=all
    board_build.flash_mode: dio
  on_boot: 
    priority: 600
    then:
      - light.turn_on: backlight

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 4MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

external_components:
    - source: github://EmbedMe-io/embedme
      components: [i80, io_bus, ili9xxx, spi]
      refresh: 1d

# Enable logging
logger:
  level: DEBUG

api:
  encryption:
    key: !secret m4dialencryption

ota:
  platform: esphome
  password: !secret m4dialotapassword

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 10.0.0.248
    # Set this to the IP address of the router. Often ends with .1
    gateway: 10.0.0.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "M5Dial Fallback Hotspot"
    password: !secret m4fallbackpassword

substitutions:
  light_sensor: sensor.centraltablet_light_sensor
  alarm_entity: alarm_control_panel.alarmo

output:
  - platform: ledc
    id: backlight_output
    pin: 45
    max_power: 1.0
    min_power: 0.0

light:
  - platform: monochromatic
    output: backlight_output
    id: backlight
    default_transition_length: 250ms    

i80:
  dc_pin: 
    ignore_strapping_warning: true
    number: 0
  data_pins: 
    - 9
    - ignore_strapping_warning: true
      number: 46
    - ignore_strapping_warning: true
      number: 3
    - 8
    - 18
    - 17
    - 16
    - 15
  wr_pin: 47  

i2c:
  sda: 6
  scl: 5

touchscreen:
  - platform: ft63x6
    id: my_touchscreen
    interrupt_pin: 7
    transform:
      swap_xy: false
      mirror_y: true
      mirror_x: true
    on_touch:
      - logger.log: "Touched"

psram:
  speed: 80MHz

display:
  - platform: ili9xxx
    bus_type: i80
    id: w32_disp
    model: st7796
    dimensions:
      height: 480
      width: 320
    transform:
      mirror_y: true
      mirror_x: false
      swap_xy: false
    reset_pin: 4
    data_rate: 4MHz
    color_order: bgr
    invert_colors: true
    auto_clear_enabled: false
    update_interval: never

# sensors

sensor:
  - platform: homeassistant
    name: "Room Lux Sensor"
    id: luxsensor
    entity_id: $light_sensor
    on_value:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "ignoring lux change as lvgl is paused"
          else:
            - logger.log: 
                format: "The illumincance sensor reports value %.0f"
                args: [ 'id(luxsensor).state' ]
            - lambda: |- 
                float lux = id(luxsensor).state;
                if (lux < 15) 
                { 
                  id(backlight_output).set_level(0.1);
                }
                else if (lux < 50)
                {
                  id(backlight_output).set_level(0.3);
                }
                else if (lux < 125)
                {
                  id(backlight_output).set_level(0.5);
                }
                else if (lux < 200)
                {
                  id(backlight_output).set_level(0.6);
                }
                else
                {
                  id(backlight_output).set_level(1);
                }

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - minutes: /1
        seconds: 0
        then:
          - lvgl.label.update:
              id: time_label
              text:
                time_format: "%H:%M"
                time: !lambda return id(homeassistant_time).now();

text_sensor:
  - platform: homeassistant
    entity_id: $alarm_entity
    id: alarm_panel_status
    filters:
      - to_lower:
    on_value: 
      then:
        - if:
            condition:
              lambda: 'return id(alarm_panel_status).state == "arming";'
            then:
              - lvgl.page.show: arming_page
            else:
              -  lvgl.page.show: keypad_page
        - if:
            condition:
              lambda: 'return id(alarm_panel_status).state == "disarmed";'
            then:
              -  lvgl.page.show: keypad_page
        - if:
            condition:
              lambda: 'return id(alarm_panel_status).state == "armed_home";'
            then:
              -  lvgl.page.show: keypad_page
        - if:
            condition:
              lambda: 'return id(alarm_panel_status).state == "armed_away";'
            then:
              -  lvgl.page.show: keypad_page          

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.konnected_8567e2_zone_1
    id: zone_1_sensor
    on_press:
      then:
        - lvgl.led.update:
            id: zone_1_led
            brightness: 100%
        - lvgl.resume:
        - lvgl.widget.redraw:
        - light.turn_on: backlight
    on_release: 
      then:
        - lvgl.led.update:
            id: zone_1_led
            brightness: 0%
  - platform: homeassistant
    entity_id: binary_sensor.konnected_8567e2_zone_2
    id: zone_2_sensor
    on_press:
      then:
        - lvgl.led.update:
            id: zone_2_led
            brightness: 100%
    on_release: 
      then:
        - lvgl.led.update:
            id: zone_2_led
            brightness: 0%
  - platform: homeassistant
    entity_id: binary_sensor.konnected_8567e2_zone_3
    id: zone_3_sensor
    on_press:
      then:
        - lvgl.led.update:
            id: zone_3_led
            brightness: 100%
    on_release: 
      then:
        - lvgl.led.update:
            id: zone_3_led
            brightness: 0%

lvgl:
  on_idle:
    timeout: 30s
    then:
      - logger.log: "LVGL is idle"
      - light.turn_off: backlight
      - lvgl.pause:
  pages:    
    - id: keypad_page
      bg_color: black
      widgets:
        - obj:
            width: 320
            border_opa: 0
            bg_color: black
            y: 25
            layout:
              type: grid
              pad_column: 4px
              grid_columns: [CONTENT, CONTENT, CONTENT, CONTENT] # equal
              grid_rows: [CONTENT, CONTENT ]
            widgets:
              - led:
                  id: zone_1_led
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  width: 15
                  height: 15
                  color: 0x32a852
                  brightness: 0%
              - label:
                  bg_opa: 0
                  id: zone_1_label
                  text: "Front Door"
                  text_color: white
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
              - led:
                  id: zone_2_led
                  width: 15
                  height: 15
                  color: 0x32a852
                  brightness: 0%
                  grid_cell_column_pos: 2 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
              - label:
                  id: zone_2_label
                  bg_opa: 0
                  text_color: white
                  text: "Bedrooms"
                  grid_cell_column_pos: 3 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
              - led:
                  id: zone_3_led
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  width: 15
                  height: 15
                  color: 0x32a852
                  brightness: 0%
              - label:
                  id: zone_3_label
                  bg_opa: 0
                  text_color: white
                  text: "Living Room"
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
        - label:
            id: time_label
            text_color: white
            x: 10
            y: 10
        - led:
            id: lvgl_led
            x: 10
            y: 127
            color: 0xFF0000
            brightness: 70%
        - obj:
            width: 240
            height: 25
            align_to:
              id: lvgl_led
              align: OUT_RIGHT_MID
              x: 17
            border_width: 1
            border_color: 0
            border_opa: 50%
            pad_all: 0
            bg_opa: 80%
            bg_color: 0xFFFFFF
            shadow_color: 0
            shadow_opa: 50%
            shadow_width: 10
            shadow_spread: 3
            radius: 5
            widgets:
              - label:
                  id: lvgl_label
                  align: CENTER
                  text: "Enter code"
                  text_align: CENTER
        - buttonmatrix:
            bg_opa: 0
            id: lvgl_keypad
            x: 10
            y: 165
            width: 300
            height: 290
            items:
              pressed:
                bg_color: 0xFFFF00
            rows:
              - buttons:  
                  - text: "\U000F1828"
                    id: arm_away
                  - text: "\U000F099D"
                    id: arm_home
                  - text: "\U000F068A"
                    id: arm_night
              - buttons:
                  - text: 1
                    control:
                      no_repeat: true
                  - text: 2
                    control:
                      no_repeat: true
                  - text: 3
                    control:
                      no_repeat: true
              - buttons:
                  - text: 4
                    control:
                      no_repeat: true
                  - text: 5
                    control:
                      no_repeat: true
                  - text: 6
                    control:
                      no_repeat: true
              - buttons:
                  - text: 7
                    control:
                      no_repeat: true
                  - text: 8
                    control:
                      no_repeat: true
                  - text: 9
                    control:
                      no_repeat: true
              - buttons:
                  - text: "\uF55A"
                    key_code: "*"
                    control:
                      no_repeat: true
                  - text: 0
                    control:
                      no_repeat: true
                  - text: "\uF00C"
                    key_code: "#"
                    control:
                      no_repeat: true
    - id: arming_page
      bg_color: orange
      widgets:
        - label:
            bg_opa: 0
            id: arming_label
            text: "Arming"
            text_color: white
                  

key_collector:
  - source_id: lvgl_keypad
    min_length: 4
    max_length: 4
    end_keys: "#"
    end_key_required: True
    back_keys: "*"
    allowed_keys: "0123456789*#"
    timeout: 5s
    on_progress:
      - if:
          condition:
            lambda: return (0 != x.compare(std::string{""}));
          then:
            - lvgl.label.update:
                id: lvgl_label
                text: !lambda 'return x.c_str();'
          else:
            - lvgl.label.update:
                id: lvgl_label
                text: "Enter code"
    on_result:
      - if:
          condition:
            lambda: return (0 == x.compare(std::string{"1234"}));
          then:
            - lvgl.led.update:
                id: lvgl_led
                color: 0x00FF00      
          else:
            - lvgl.led.update:
                id: lvgl_led
                color: 0xFF0000
