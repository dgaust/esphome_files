esphome:
  name: m4dial
  friendly_name: M4Dial
  on_boot:
    then:
     # read the RTC time once when the system boots
      - pcf8563.read_time: my_time
      - light.turn_on: backlight
      - text_sensor.template.publish:
          id: template_text
          state: !lambda |-
              char str[17];
              time_t currTime = id(my_time).now().timestamp;
              strftime(str, sizeof(str), "%Y-%M-%d %H:%M", localtime(&currTime));
              return  { str };
  # BEEP GPIO3
  # RGBLED GPIO21
  
globals:
  - id: encoder_value
    type: int
    initial_value: '0'

external_components:
  - source: github://dgaust/esphome@gc9a01
    components: [ ft3267, gc9a01 ]
    refresh: 0s

i2c:
  - id: bus_internal
    sda: GPIO11
    scl: GPIO12
    scan: False
    frequency: 400kHz

touchscreen:
  platform: ft3267

time:
  - platform: pcf8563
    id: my_time
    address: 0x51
    update_interval: never
  - platform: homeassistant
    on_time_sync:
      then:
        - pcf8563.write_time: my_time
        - text_sensor.template.publish:
            id: template_text
            state: !lambda |-
              char str[17];
              time_t currTime = id(my_time).now().timestamp;
              strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
              return  { str };

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG


rc522_i2c:
  i2c_id:  bus_internal
  address: 0x28
  on_tag:
    then:
      - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
      - homeassistant.tag_scanned: !lambda 'return x;'

rtttl:
  output: my_speaker_output
  id: my_rtttl

color:
  - id: black
    hex: '000000'
  - id: dark_green
    hex: '013208'
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%
  - id: my_green
    hex: 59981A
  - id: my_blue
    red: 3%
    green: 5%
    blue: 100%
  - id: my_yellow
    hex: FFFF00 
  - id: my_light_blue
    hex: 145DA0
  - id: my_light_red
    hex: fc6d6d
  - id: my_light_orange
    hex: FD7F20
  - id: my_light_yellow
    hex: B58B00
  - id: dark_blue
    hex: '000040'
  - id: dark_red
    hex: '67091C'
  - id: dark_grey
    hex: '36454F'

image:
  - id: background
    file: images/m4dial/background.png
    type: RGBA
    resize: 240x240
  - id: volume_mute
    file: mdi:volume-variant-off
    resize: 40x40
  - id: volume_notmute
    file: mdi:volume-low
    resize: 40x40
  - id: downlighticon
    file: mdi:light-recessed
    resize: 80x80
  - id: airconicon
    file: mdi:air-conditioner
    resize: 80X80
  - id: ac_cool_40
    file: mdi:snowflake
    resize: 40x40
  - id: ac_heatcool_40
    file: mdi:sun-snowflake-variant
    resize: 40x40
  - id: ac_fan_40
    file: mdi:fan
    resize: 40x40
  - id: power_off_icon_40
    file: mdi:power-cycle
    resize: 40x40
  - id: ac_dry_40
    file: mdi:water-percent
    resize: 40x40
  - id: ac_heat_40
    file: mdi:fire
    resize: 40x40
  - id: temp_target_icon
    file: mdi:thermometer
    resize: 20x20
  - id: temp_current_icon
    file: mdi:bullseye
    resize: 20x20
  - id: ac_cool_80
    file: mdi:snowflake
    resize: 80x80
  - id: ac_heatcool_80
    file: mdi:sun-snowflake-variant
    resize: 80x80
  - id: ac_fan_80
    file: mdi:fan
    resize: 80x80
  - id: power_off_icon_80
    file: mdi:power-cycle
    resize: 80x80
  - id: ac_dry_80
    file: mdi:water-percent
    resize: 80x80
  - id: ac_heat_80
    file: mdi:fire
    resize: 80x80
  - id: volumeknob
    file: mdi:knob
    resize: 80x80
  - id: infoicon
    file: mdi:information
    resize: 40x40
  - id: zoneicon
    file: mdi:air-filter
    resize: 25x25
  - id: volumeknob_60
    file: mdi:knob
    resize: 60x60
  - id: airconicon_60
    file: mdi:air-conditioner
    resize: 50X50
  - id: downlighticon_60
    file: mdi:light-recessed
    resize: 60x60
  - id: downlighticon_menu_icon
    file: mdi:light-recessed
    resize: 30x30
  - id: fan_menu_icon
    file: mdi:fan
    resize: 30x30
  - id: audio_menu_icon
    file: mdi:knob
    resize: 30x30
  - id: threed_printer_menu_icon
    file: mdi:printer-3d-nozzle
    resize: 30x30
  - id: tv_menu_icon
    file: mdi:television
    resize: 30x30
  - id: alarm_menu_icon
    file: mdi:alarm-light
    resize: 30x30
  - id: settings_menu_icon
    file: mdi:cog
    resize: 30x30

font:
  - id: roboto16
    file: "gfonts://Roboto"
    size: 16

  - id: roboto20
    file: "gfonts://Roboto"
    size: 24
  
  - id: roboto24
    file: "gfonts://Roboto"   
    size: 24

# Enable Home Assistant API
api:
  encryption:
    key: !secret m4dialencryption

ota:
  password: !secret m4dialotapassword

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 10.0.0.237
    gateway: 10.0.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "M4Dial Fallback Hotspot"
    password: !secret m4fallbackpassword

captive_portal:

uart:
  tx_pin: GPIO2
  rx_pin: GPIO1
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

ld2410:

spi:
  mosi_pin: GPIO5
  clk_pin: GPIO6

display:
- platform: gc9a01
  reset_pin: GPIO8
  id: my_lcd
  cs_pin: GPIO7
  dc_pin: GPIO4
  rotation: 90
  width: 240
  height: 240
  update_interval: 1s
  pages:
    - id: TestPage
      lambda: |- 
        it.image(120, 120, background, ImageAlign::CENTER);
        it.filled_circle(120, 120, 30, my_light_blue);  // Central Circle
        it.image(120, 120, downlighticon_menu_icon, ImageAlign::CENTER);
        
        it.filled_circle(190, 120, 30, my_light_orange);  // Circle 2
        it.image(190, 120, threed_printer_menu_icon, ImageAlign::CENTER);

        it.filled_circle(155, 181, 30, my_light_orange);  // Circle 3
        it.image(155, 181, settings_menu_icon, ImageAlign::CENTER);
        
        it.filled_circle(85, 181, 30, my_light_orange);  // Circle 4
        it.image(85, 181, tv_menu_icon, ImageAlign::CENTER);

        it.filled_circle(50, 120, 30, my_light_orange);  // Circle 5
        it.image(50, 120, alarm_menu_icon, ImageAlign::CENTER);

        it.filled_circle(85, 59, 30, my_light_orange);   // Circle 6
        it.image(85, 59, fan_menu_icon, ImageAlign::CENTER);
       
        it.filled_circle(155, 59, 30, my_light_orange); // Circle 7     
        it.image(155, 59, audio_menu_icon, ImageAlign::CENTER);  
    - id: FirstPage
      lambda: |-
        float screenheight = it.get_height();
        float screenwidth = it.get_width();
        float halfscreenheight = screenheight / 2;
        float halfscreenwidth = screenwidth /2;
        it.image(120, 120, background, ImageAlign::CENTER);
        int centerX = 120;  // X-coordinate of the circle center
        int centerY = 120;  // Y-coordinate of the circle center
        int baseRadius = 120;  // Radius of the arc (half of 240)
        int thickness = 40;    // Thickness of the arc
        int encoderBrightness = id(encoder_value); 
        int brightness = map(encoderBrightness, 0, 100, 180, 540);  // Map brightness to 0-360 degrees
        for (int r = 0; r < thickness; r++) {  // Loop for each radius
          int currentRadius = baseRadius - r;  // Calculate current radius
          
          // Initialize lastX and lastY to the leftmost point (180 degrees)
          float startRad = 180 * PI / 180.0;
          int lastX = centerX + currentRadius * cos(startRad);
          int lastY = centerY + currentRadius * sin(startRad);

          for (int i = 180; i <= brightness; i++) {  // Loop to draw the arc, starting from 180 degrees
            float rad = i * PI / 180.0;  // Convert degree to radian
            int x = centerX + currentRadius * cos(rad);
            int y = centerY + currentRadius * sin(rad);

            it.line(lastX, lastY, x, y, my_yellow);
            lastX = x;
            lastY = y;
          }
        }
        it.printf(halfscreenwidth, halfscreenheight, id(roboto20), TextAlign::TOP_CENTER, "Lights");




binary_sensor:
  - platform: touchscreen
    name: "Central Circle Touch"
    x_min: 90   # Center x - radius
    x_max: 150  # Center x + radius
    y_min: 90   # Center y - radius
    y_max: 150  # Center y + radius
    on_state:
      then:
        - logger.log: "Central Circle Touched"
        - display.page.show: FirstPage
  - platform: touchscreen
    name: "Circle 2 Touch"
    x_min: 160  # Center x - radius
    x_max: 220  # Center x + radius
    y_min: 90   # Center y - radius
    y_max: 150  # Center y + radius
    page_id: TestPage
    on_state:
      then:
        - logger.log: "Circle 2 Touched"
  - platform: touchscreen
    name: "Circle 3 Touch"
    page_id: TestPage
    x_min: 125  # Center x - radius
    x_max: 185  # Center x + radius
    y_min: 151  # Center y - radius
    y_max: 211  # Center y + radius
    on_state:
      then:
        - logger.log: "Circle 3 Touched"
  - platform: touchscreen
    name: "Circle 4 Touch"
    page_id: TestPage
    x_min: 55   # Center x - radius
    x_max: 115  # Center x + radius
    y_min: 151  # Center y - radius
    y_max: 211  # Center y + radius
    on_state:
      then:
        - logger.log: "Circle 4 Touched"
  - platform: touchscreen
    name: "Circle 5 Touch"
    page_id: TestPage
    x_min: 20   # Center x - radius
    x_max: 80   # Center x + radius
    y_min: 90   # Center y - radius
    y_max: 150  # Center y + radius
    on_state:
      then:
        - logger.log: "Circle 5 Touched"
  - platform: touchscreen
    name: "Circle 6 Touch"
    page_id: TestPage
    x_min: 55   # Center x - radius
    x_max: 115  # Center x + radius
    y_min: 29   # Center y - radius
    y_max: 89   # Center y + radius
    on_state:
      then:
        - logger.log: "Circle 6 Touched"
  - platform: touchscreen
    name: "Circle 7 Touch"
    page_id: TestPage
    x_min: 125  # Center x - radius
    x_max: 185  # Center x + radius
    y_min: 29   # Center y - radius
    y_max: 89   # Center y + radius
    on_state:
      then:
        - logger.log: "Circle 7 Touched"
  - platform: gpio
    pin: GPIO42
    name: "BacklightButton" 
    on_press:
      - display.page.show: TestPage
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotaryencoder
    max_value: 100
    min_value: 0
    resolution: 4
    pin_a: 
      number: GPIO40
      mode:
       input: true
       pullup: true
    pin_b: 
      number: GPIO41
      mode:
       input: true
       pullup: true
    accuracy_decimals: 1
    on_value:
      - globals.set:
            id: encoder_value
            value: !lambda 'return x;'
      - component.update: my_lcd
      
    #on_clockwise: 
    #    - display.page.show_previous: my_lcd
    #on_anticlockwise:
    #    - display.page.show_next: my_lcd

  - platform: homeassistant
    name: "Media Volume"
    id: "beam_volume"
    entity_id: media_player.living_room
    attribute: volume_level
  - platform: ld2410
    detection_distance:
      name: Detection Distance
      id: ddistance
      on_value: 
        then:
          if:
            condition:
              - lambda: 'return id(ddistance).state < 150;'  
            then:
              if:
                condition:
                  - light.is_off: backlight
                then:              
                  - light.turn_on: backlight
            else:
              - light.turn_off: 
                  id: backlight
                  transition_length: 1s           
    light:
      name: light
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
  - platform: homeassistant
    name: "Dimmer Light Brightness"
    id: "dimmersensor_brightness"
    entity_id: light.great_room_dimmer_4
    attribute: brightness
    on_value:
      - globals.set:
            id: encoder_value
            value: !lambda 'return map(x, 0, 254, 0, 100);'
  - platform: homeassistant
    name: "Climate Device Current Temperature"
    id: "climatedevice_currenttemp"
    entity_id: climate.doris
    attribute: current_temperature
  - platform: homeassistant
    name: "Climate Device Setpoint"
    id: "climatedevice_setpoint"
    entity_id: climate.doris
    attribute: temperature
    on_value:
      - component.update: my_lcd
  - platform: homeassistant
    name: "Room Lux Sensor"
    id: luxsensor
    entity_id: sensor.sauron_illuminance
    on_value:
      - logger.log: 
          format: "The illumincance sensor reports value %.0f"
          args: [ 'id(luxsensor).state' ]
      - lambda: |- 
          float lux = id(luxsensor).state;
          if (lux < 15) 
          { 
            id(oledbacklight).set_level(0.1);
          }
          else if (lux < 50)
          {
            id(oledbacklight).set_level(0.3);
          }
          else if (lux < 125)
          {
            id(oledbacklight).set_level(0.5);
          }
          else if (lux < 200)
          {
            id(oledbacklight).set_level(0.6);
          }
          else
          {
            id(oledbacklight).set_level(1);
          }

light:
  - platform: monochromatic
    id: backlight
    name: "Backlight"
    output: oledbacklight
    default_transition_length: 250ms

output:
  - id: oledbacklight
    platform: ledc
    pin: GPIO9
    #pin: GPIO21
    max_power: 1
    min_power: 0
  - platform: ledc
    pin: GPIO3
    id: my_speaker_output
    
switch:
  - platform: ld2410
    engineering_mode:
      name: "engineering mode"
    bluetooth:
      name: "control bluetooth"

text_sensor:
  - platform: ld2410
    version:
      name: "firmware version"
    mac_address:
      name: "mac address"
  - platform: homeassistant
    name: "Dimmer Light Sensor"
    id: "dimmersensor"
    entity_id: light.great_room_dimmer_4
    filters:
      - to_upper:
  - platform: homeassistant
    name: "Climate Device"
    id: "climatedevice"
    entity_id: climate.doris
    filters:
    - map:
      - heat_cool -> auto
  - platform: homeassistant
    name: "Media Player Mute"
    id: "mediaplayermute"
    entity_id: media_player.living_room
    attribute: is_volume_muted
  - platform: homeassistant
    name: "Zones Open"
    id: "zones_open"
    entity_id: sensor.ac_zones_open
  - platform: template
    name: "RTC Sensor"
    id: template_text
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: espip
